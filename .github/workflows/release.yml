# .github/workflows/release.yml
name: Build and Release Artifacts

permissions:
  contents: write

on:
  release:
    types: [created]  # Trigger when a new release is created
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build:
    name: Build and Upload for ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]  # Include more architectures if needed
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Cross-Compilation Toolchain (Linux Only)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Rust target for ${{ matrix.arch }}
        run: rustup target add ${{ matrix.target }}

      - name: Set Cargo Linker (for Cross-Compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: |
          echo '[target.${{ matrix.target }}]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config

      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Tarball for Linux and macOS
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          tar -czvf artifacts/scaf-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release scaf

      - name: Create Zip File for Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifacts
          powershell Compress-Archive -Path target\${{ matrix.target }}\release\scaf.exe -DestinationPath artifacts\scaf-${{ matrix.target }}.zip

      - name: Upload Artifacts to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}  # Reference the upload URL provided by the release event
          asset_path: artifacts/scaf-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: scaf-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream
